<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python3 重载主模块(__main__)的权宜之计(workaround)]]></title>
    <url>%2Fc1ino%2F2020%2F02-10-python-reload-main-module-workaround.html</url>
    <content type="text"><![CDATA[本文经验仅供参考。 概要既不了解 import 原理，也不了解 ModuleSpec, loader, importer ，更不了解 importlib 模块的情况下，所写出的邪门歪道式强行重载主模块(__main__)的方法。 别名/Alias for SEO 重载 / 重新加载 / 热重载 / 热更新 主模块 / 当前模块 / 顶层模块 / 顶层脚本环境 / 顶层代码 / 顶层文件 / 主文件 权宜之计 / 解决方法 / 怎么 / 怎样 / 如何 交互模式 / 交互式 / 互动式 Python3 / Python 3.x / py3 top-level script, interactive mode, main module reload, workaround, how to 权宜之计/TL;DR示例： 123456789101112def reload__main__(): '''reload __main__ workaround''' # __main__ module mod = sys.modules['__main__'] # reload loader = mod.__dict__['__loader__'] loader.exec_module(mod) # from __main__ import * sys.modules['__main__'].__dict__.update(mod.__dict__) return mod 或者这篇讨论中列举的方法？（未验证） https://stackoverflow.com/questions/29960634/reload-the-currently-running-python-script/29962256#29962256 常见问题/FAQ 方法可靠吗？ 不可靠，这是未经任何正式文档记录的旁门左道。 适用情况？ 适用于 python -i 交互模式下对当前主模块脚本文件(__main__)整个模块的重载。但未必适用于其他交互式/REPL情况，例如 python -m idlelib -r IDLE 下用上述方法重载主模块会失败。 会影响已加载模块吗？ 不会顺便重载其他模块，也不会影响已经加载的旧模块对象。 为什么示例代码运行后没有效果？ 视乎 Python3 具体版本的不同，方法未必适用。（你环境有问题吧？） 有什么副作用？ 重载当前主模块必然会导致全局命名空间的混乱，因此应当谨慎使用。 对任何 Python3 脚本文件都适用吗？ 单文件模块视乎其文件名未必能进行 import 操作，如含有.(点分隔符)的情况。 如何重载其他模块？ 如果只需要重载模块，可以使用 importlib.reload()，在此不再赘述。 其他交互式/REPL情况要如何重载主模块？ 不清楚，也许可以尝试获取主模块路径，从路径导入并重载模块再覆盖全局变量的办法。（不适用的原因也许是因为“主模块”不是真正的“顶层模块(__main__)”？）（用回 python -i）（ipython %autoreload 黑魔法） 目录 概要 别名/Alias for SEO 权宜之计/TL;DR 常见问题/FAQ 目录 解决过程 过程目标 具体说明 原理 具体实现 相关 参考 解决过程直接原因：以 python -i 交互模式调试时方便重载。环境：Win10 过程目标 重载当前主模块(__main__) 近似于 from ... import * 的对应 reload() 方式。 重载模块名中含有.(点分隔符)的模块 直接使用 reload() 源码进行邪门歪道式强行重载。（命名不规范，调试两行泪） （获取当前主模块文件路径） __file__ sys.argv[0] sys.modules[&#39;__main__&#39;].__dict__[&#39;__loader__&#39;].__dict__[&#39;path&#39;] 具体说明原理参考相关文档及源码，在此不赘述： https://docs.python.org/zh-cn/3.6/library/importlib.html#importing-a-source-file-directly https://github.com/python/cpython/blob/3.6/Lib/importlib/__init__.py https://github.com/python/cpython/blob/c352e6c7446c894b13643f538db312092b351789/Lib/importlib/_bootstrap.py#L598 https://docs.python.org/zh-cn/3.6/faq/programming.html#when-i-edit-an-imported-module-and-reimport-it-the-changes-don-t-show-up-why-does-this-happen https://docs.python.org/zh-cn/3.6/library/sys.html#sys.modules 具体实现关键在于如何获取并重载当前主模块。除了上文示例所述，具体还有几种实现方法，但可能效果上各自有些差异。（重载有四种写法） 代码全凭印象，未经严格验证，实际效果可能有出入。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import sys, os, importlib'''try to reload __main__'''def _reload_1(path=None): # path = path or sys.argv[0] file = os.path.basename(path) name = os.path.splitext(file)[0] path = os.path.abspath(path) spec = importlib.util.spec_from_file_location(name, path) mod = importlib.util.module_from_spec(spec) spec.loader.exec_module(mod) return moddef _reload_2(mod=None): # mod = mod or sys.modules['__main__'] spec = mod.__spec__ spec.loader.exec_module(mod) return moddef _reload_3(mod=None): # mod = mod or sys.modules['__main__'] loader = mod.__dict__['__loader__'] loader.exec_module(mod) return mod # # fail# def _reload_4(path=None):# # path = sys.modules['__main__'].__dict__['__loader__'].__dict__['path']# path = path or sys.argv[0]# path = os.path.abspath(path) # spec = importlib.machinery.PathFinder.find_spec(path)# mod = importlib.util.module_from_spec(spec)# spec.loader.exec_module(mod)# return modfrom importlib import _bootstrapdef _reload_5(mod=None): # mod = mod or sys.modules['__main__'] sys.modules[mod.__name__] = mod spec = mod.__spec__ _bootstrap._exec(spec, mod) return mod# from importlib import reload# import _another_module_ as mod# def _reload_6():# global mod# name = mod.__name__# _globals = sys.modules['__main__']# mod = __import__(name, _globals, locals(), [], 0)# reload(mod)# return mod 相关 import 的替代： 1importlib.import_module(mod_name) 1__import__(mod_name, globals(), locals(), [], 0) 事后找到的相关讨论（闭门造车轮）（术语不规范，搜索两行泪） https://stackoverflow.com/questions/29960634/reload-the-currently-running-python-script https://stackoverflow.com/questions/56620387/getting-path-of-the-top-level-python-script https://stackoverflow.com/questions/32897599/reload-a-module-and-dependent-top-level-module 顶层模块 __main__ https://docs.python.org/zh-cn/3.6/library/__main__.html https://docs.python.org/zh-cn/3.6/reference/import.html#special-considerations-for-main https://docs.python.org/zh-cn/3.6/reference/toplevel_components.html#complete-python-programs 参考 https://stackoverflow.com/questions/22442546/how-to-reload-after-from-module-import/22442644#22442644 https://www.python.org/dev/peps/pep-0499/#proposal https://stackoverflow.com/questions/1828127/how-to-reference-python-package-when-filename-contains-a-period/1828249#1828249 https://stackoverflow.com/questions/602846/how-can-i-access-the-current-executing-module-or-class-name-in-python/41233151#41233151 https://stackoverflow.com/questions/5516783/how-to-reload-python-module-imported-using-from-module-import https://docs.python.org/zh-cn/3.6/library/functions.html?highlight=globals#globals https://docs.python.org/zh-cn/3.6/library/functions.html?#__import__ https://www.python.org/dev/peps/pep-3130/ https://blog.csdn.net/Three_dog/article/details/90298104]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>workaround</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3 venv 模块 No module named 'encodings' 其中一种解决办法]]></title>
    <url>%2Fc1ino%2F2020%2F01-19-python-venv-module-fatal-error.html</url>
    <content type="text"><![CDATA[本文经验仅供参考。 报错信息12Fatal Python error: Py_Initialize: unable to load the file system codecModuleNotFoundError: No module named 'encodings' 问题描述Win10 系统中使用 Python 3.x 自带的 venv 模块所生成的虚拟环境时出现的错误。 解决办法/TL;DR恢复安装 venv_path\pyvenv.cfg（虚拟环境配置文件）所指定的特定路径和版本的 python 解释器。（或者使用 python -m venv --upgrade &quot;venv_path&quot; 更新配置文件以指定虚拟环境使用系统中当前的 python 解释器？） 姑且的总结 标准库自带的轻量级虚拟环境模块 python -m venv， 所生成的虚拟环境的使用前提：重要路径保持不变。 （因为写死了解释器、虚拟环境目录的绝对路径） 也就是： 虚拟环境仍然位于初始化时的路径。（不可移动虚拟环境目录的路径） 初始化时所使用的 python 路径仍然未变。（不可移除初始化虚拟环境时所使用的 python 及其目录） 错误猜想 PATH 环境变量中的 python 版本错误？ 不完全是，而且即便版本一致也依然会报错（可能是因为与配置文件中记录的解释器路径不一致）。 相关参考https://docs.python.org/zh-cn/3.6/library/venv.htmlhttps://learnku.com/docs/pymotw/venv-create-virtual-environments/3476 https://bugs.python.org/issue22213https://bugs.python.org/issue35706https://www.v2ex.com/t/578069https://stackoverflow.com/questions/5694706/py-initialize-fails-unable-to-load-the-file-system-codec]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>Win10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Win10 命令提示符自带命令实现彩色输出]]></title>
    <url>%2Fc1ino%2F2019%2F08-03-colored-echo-in-win10-command-prompt.html</url>
    <content type="text"><![CDATA[前言原理是使用 ANSI 转义序列（ANSI escape code） 来控制文本的颜色，在 Win10 系统的 命令提示符 / 命令行 / 控制台 / cmd 的窗口中仅使用 cmd.exe 内置的命令来实现彩色输出，无论是在 Command Prompt（命令提示符） 中还是 .bat / .cmd 批处理脚本中。 ANSI 转义序列 支持的颜色： 3/4 bit（8/16色）、8 bit（256色）、24 bit（RGB真彩色） 限制：Win10 较旧的版本可能不支持。 本文仅作分享，不保证准确性。 目录 前言 目录 简介 FAQ 原理与方法 3/4 bit（8/16色） 8 bit（256色） 24 bit（RGB真彩色） 参考 简介FAQ Q：Windows 从什么版本开始支持使用彩色化输出？ A：不知道。 Q：命令提示符还支持其他 ANSI 转义序列 吗？ A：支持不少，但不清楚支持多少。 Q：内置命令是 cmd.exe 提供的？ A：不清楚…… Q：这有什么用吗？ A：鉴于 cmd / bat 脚本过于过时，以及不同版本的系统中兼容性的问题，大概没什么用。 原理与方法通过 prompt 命令获得 ^[ / ESC ( 27 / 0x1b / 033 ) 字符后，直接用 echo 命令配合 ANSI 转义序列 来输出指定颜色的文本。 echo ^[[36mCyan^[[m ^[：ESC 字符，而不是 ^ [ 两个字符的组合，输入方法见下方。 ^[[36m：青色前景 ^[[m：默认颜色 ANSI 转义序列 的格式与详细可以搜索或者阅读底部的参考链接，在此不再赘述。 ESC 字符的获取/输入方法命令提示符中 Ctrl+[ 同时按下 Ctrl 和 [ 键。 Alt+2（小键盘）+7（小键盘） 按住 Alt 键，依次输入小键盘的 2、7，松开 Alt 键。 输入命令： 1@for /f "delims=#" %i in ('prompt #$E#^&amp;echo on^&amp;for %a in ^(1^) do rem') do set "ESC_CHAR=%%i" 或者直接输出 ANSI 转义序列： 1@for /f "delims=#" %i in ('prompt #$E#^&amp;echo on^&amp;for %a in ^(1^) do rem') do @echo;%i[36mCyan%i[m 脚本中 命令： 1for /f "delims=#" %%i in ('prompt #$E#^&amp;echo on^&amp;for %%a in ^(1^) do rem') do set "ESC_CHAR=%%i" 编辑器中输入 Alt+2（小键盘）+7（小键盘）（如支持）。 使用编辑器提供的功能（如有）来输入特殊字符 ESC。 3/4 bit（8/16色） ^[[m / ^[[0m：默认颜色（重置） ^[[&lt;n&gt;m：指定前景色/背景色 &lt;n&gt;：颜色代码， 30-37：指定前景色； 40-47：指定背景色。 ^[[36m：青色前景 ^[[41m：红色背景 ^[[36;41m：青色前景+红色背景 ^[[1m：开启高亮前景 ^[[22m：关闭高亮前景 ^[[1;36;41m：高亮青色前景+红色背景 ^[[22;36;41m：正常青色前景+红色背景 ^[[7m：开启反显（交换前景和背景颜色） ^[[27m：关闭反显 ^[[7;36;41m：红色前景+青色背景 8色 颜色 前景色代码 背景色代码 R G B 黑（K） 30 40 0 0 0 红（R） 31 41 128 0 0 绿（G） 32 42 0 128 0 黄（Y） 33 43 128 128 0 蓝（B） 34 44 0 0 128 品红（M） 35 45 128 0 128 青（C） 36 46 0 128 128 白 37 47 128 128 128 来源：https://zh.wikipedia.org/zh-cn/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97#3/4%E4%BD%8D RGB + CMYK 注：16色就是加上高亮的颜色。 8 bit（256色） ^[[38;5;&lt;n&gt;m：指定前景色为代码 n 的颜色 ^[[48;5;&lt;n&gt;m：指定背景色为代码 n 的颜色 &lt;n&gt;：颜色的代码，范围 0-255。颜色代码的详情和换算不在此赘述。 ^[[38;5;39m：指定前景色为代码 39 的“浅蓝” ^[[48;5;219m：指定背景色为代码 219 的“浅粉” ^[[38;5;39;48;5;219m：指定前景色为“浅蓝”，背景色为“浅粉” bat 脚本列出 256 色： 输出 6 列 1234567891011121314151617181920212223242526272829303132333435@echo off::src: https://stackoverflow.com/a/5344911set ESC_CHAR=@for /f "delims=#" %%i in ('prompt #$E#^&amp;echo on^&amp;for %%a in ^(1^) do rem') do set ESC_CHAR=%%isetlocal enabledelayedexpansionset newline=set /a nlcnt=8for /l %%i in (0,1,15) do ( set /a clrstr=1000+%%i set /p "str=%ESC_CHAR%[7;40;38;5;%%im !clrstr:~-3! %ESC_CHAR%[m"&lt;nul set /a "newline=(%%i+1)%%nlcnt" if "!newline!" equ "0" echo.)set newline=set /a nlcnt=6for /l %%r in (0,1,5) do ( for /l %%i in (0,1,35) do ( set /a "clrnum=(36*%%r)+%%i+16" set /a clrstr=1000+clrnum set /p "str=%ESC_CHAR%[7;40;38;5;!clrnum!m !clrstr:~-3! %ESC_CHAR%[m"&lt;nul set /a "newline=(clrnum-15)%%nlcnt" if "!newline!" equ "0" echo. ))set newline=set /a nlcnt=8for /l %%i in (232,1,255) do ( set /a clrstr=1000+%%i set /p "str=%ESC_CHAR%[7;40;38;5;%%im !clrstr:~-3! %ESC_CHAR%[m"&lt;nul set /a "newline=(%%i-231)%%nlcnt" if "!newline!" equ "0" echo.)endlocalpause&gt;nul 输出 36 列 1234567891011121314151617@echo off::src: https://stackoverflow.com/a/5344911set ESC_CHAR=@for /f "delims=#" %%i in ('prompt #$E#^&amp;echo on^&amp;for %%a in ^(1^) do rem') do set ESC_CHAR=%%isetlocal enabledelayedexpansionset newline=set /a nlcnt=36for /l %%i in (0,1,255) do ( set /a clrstr=1000+%%i set /p "str=%ESC_CHAR%[7;48;5;0;38;5;%%im !clrstr:~-3! %ESC_CHAR%[m"&lt;nul set /a "newline=(%%i+1)%%(16)" if %%i geq 16 set /a "newline=(%%i-15)%%(%nlcnt%)" if "!newline!" equ "0" echo.)endlocalpause&gt;nul 输出 18 列 123456789101112131415161718192021222324252627282930313233@echo off::src: https://stackoverflow.com/a/5344911set ESC_CHAR=@for /f "delims=#" %%i in ('prompt #$E#^&amp;echo on^&amp;for %%a in ^(1^) do rem') do set ESC_CHAR=%%isetlocal enabledelayedexpansionfor /l %%i in (0,1,15) do ( set /a clrstr=1000+%%i set /p "str=%ESC_CHAR%[7;40;38;5;%%im !clrstr:~-3! %ESC_CHAR%[m"&lt;nul)echo.for /l %%r in (0,1,5) do ( for /l %%i in (0,1,17) do ( set /a "clrnum=(36*%%r)+%%i+16" set /a clrstr=1000+clrnum set /p "str=%ESC_CHAR%[7;40;38;5;!clrnum!m !clrstr:~-3! %ESC_CHAR%[m"&lt;nul ) echo.)for /l %%r in (0,1,5) do ( for /l %%i in (18,1,35) do ( set /a "clrnum=(36*%%r)+%%i+16" set /a clrstr=1000+clrnum set /p "str=%ESC_CHAR%[7;40;38;5;!clrnum!m !clrstr:~-3! %ESC_CHAR%[m"&lt;nul ) echo.)for /l %%i in (232,1,255) do ( set /a clrstr=1000+%%i set /p "str=%ESC_CHAR%[7;40;38;5;%%im !clrstr:~-3! %ESC_CHAR%[m"&lt;nul)endlocalpause&gt;nul 24 bit（RGB真彩色） ^[[38;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt;m：指定前景色的 RGB ^[[48;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt;m：指定背景色的 RGB &lt;r&gt; / &lt;g&gt; / &lt;b&gt;： 0 &lt;= r, g, b &lt;=255 bat 脚本简略显示 24 bit 颜色： 输出 108 列 18 行 1944(6*18*18) 色（可自定义） 1234567891011121314151617181920212223@echo off::src: https://stackoverflow.com/a/5344911set ESC_CHAR=@for /f "delims=#" %%i in ('prompt #$E#^&amp;echo on^&amp;for %%a in ^(1^) do rem') do set ESC_CHAR=%%isetlocal enabledelayedexpansionREM 建议参数：2, 4, 6, 16, 18, 52, 86, 256set /a rmax=6-1 &amp;rem 组数-1set /a gmax=18-1 &amp;rem 行数-1set /a bmax=18-1 &amp;rem 每组的列数-1for /l %%g in (0,1,%gmax%) do ( for /l %%r in (0,1,%rmax%) do ( for /l %%b in (0,1,%bmax%) do ( set /a "r=%%r*(255/rmax)" set /a "g=%%g*(255/gmax)" set /a "b=%%b*(255/bmax)" set /p "str=%ESC_CHAR%[7;40;38;2;!r!;!g!;!b!m %ESC_CHAR%[m"&lt;nul ) ) echo.)endlocalpause&gt;nul 输出 16 列 256 行 4096(16*16*16) 色 12345678910111213141516171819@echo off::src: https://stackoverflow.com/a/5344911set ESC_CHAR=@for /f "delims=#" %%i in ('prompt #$E#^&amp;echo on^&amp;for %%a in ^(1^) do rem') do set ESC_CHAR=%%isetlocal enabledelayedexpansionfor /l %%r in (0,1,15) do ( for /l %%g in (0,1,15) do ( for /l %%b in (0,1,15) do ( set /a "r=%%r*17" set /a "g=%%g*17" set /a "b=%%b*17" set /p "str=%ESC_CHAR%[7;40;38;2;!r!;!g!;!b!m %ESC_CHAR%[m"&lt;nul ) echo. ))endlocalpause&gt;nul 参考 Wiki https://zh.wikipedia.org/zh-cn/ANSI转义序列 相关讨论 https://stackoverflow.com/questions/2048509/how-to-echo-with-different-colors-in-the-windows-command-line https://superuser.com/questions/413073/windows-console-with-ansi-colors-handling https://superuser.com/questions/1416402/can-we-use-more-colors-in-batch-script https://stackoverflow.com/questions/16755142/how-to-make-win32-console-recognize-ansi-vt100-escape-sequences 详细教程 https://my.oschina.net/dingdayu/blog/1537064 https://my.oschina.net/SamXIAO/blog/2959478 https://kuricat.com/articles/ansi-j4clw （备份：https://learnku.com/articles/26231?order_by=vote_count&amp; ） Windows 控制台官方资讯 https://devblogs.microsoft.com/commandline/24-bit-color-in-the-windows-console/ https://devblogs.microsoft.com/commandline/new-experimental-console-features/ https://devblogs.microsoft.com/commandline/updating-the-windows-console-colors/ https://devblogs.microsoft.com/commandline/introducing-the-windows-console-colortool/]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Win10</tag>
        <tag>batch/cmd</tag>
        <tag>CLI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简易建立 Win10 至 iOS 的多媒体无线串流]]></title>
    <url>%2Fc1ino%2F2019%2F06-19-streaming-from-win10-to-ios-primer.html</url>
    <content type="text"><![CDATA[前言关于如何在局域网内从 Win10 系统串流至 iOS 系统的一些简易方法的总结。 主要使用 FFmpeg 和 iOS 的 VLC 应用通过常见的流媒体协议实现直播串流，以及其他一些不需使用 FFmpeg 的点播串流方法。 （多媒体串流，指无需下载完整文件就可以播放流媒体。） 写作 primer guide，读作笔记 目录 前言 目录 简介 用途 优点 弊端 环境准备参考 FFmpeg 使用示例 直播 HTTP 点对点串流 UDP/RTP 组播串流 RTMP/HLS/DASH 流媒体服务器串流 直播附笔 点播 常见文件服务器 DLNA / UPnP 服务器 点播附笔 其他类型 附录 部分相关参考 题外话 简介用途 局域网网络广播电台/电视台 局域网点唱机/点播机 家庭多媒体中心 将 iOS 设备用作蓝牙/无线音箱 没有实用价值 优点 免费开源软件解压即用，无需安装，无需编译，无需管理员权限。 VLC 应用支持后台串流播放。 弊端 串流占用局域网带宽，略微影响其他局域网用户。 需要在命令行进行操作。 延迟 2 s 起步，比不上蓝牙/无线音箱。直播串流时间越长，延迟可能越大。 直播串流地址随局域网 IP 分配而变动，不方便使用。 VLC 应用不是专门用作串流音乐的，所以专辑封面等等界面体验较差。 音画质或有损失。 环境准备参考 网络 Win10 电脑与 iOS 手机位于同一个局域网内。 一个较为安全的局域网。 Win10 系统 FFmpeg 程序 (ver.4.1.3) 防火墙相关设置，相关风险自负。 弹出的防火墙窗口中允许程序通信； 或者添加例外规则； 或者暂时禁用防火墙。 （如有需要） Nginx 程序包（含 nginx-rtmp-module 模块） 例如：nginx 1.7.11.3 Gryphon.zip iOS 系统 VLC 应用 (ver.3.1.9)（或其他同类应用） FFmpeg 使用示例 关于 FFmpeg 串流/推流时所使用的输入参数的示例，以及可能会遇到的问题。 可选的输入源（INPUT）： 测试用输入源（纯视频流）： -re -f lavfi -i testsrc 测试用噪音源（纯音频流）： -re -f lavfi -i anoisesrc 立体声混响声卡源（纯音频流）： -f dshow -i audio=&quot;Stereo Mix (Realtek High Definition Audio)&quot; 查询 dshow 设备 立体声混响（Stereo Mix）（内放声音） 设备名称的方法在此不赘述。 桌面画面（纯视频流）： -f gdigrab -framerate 30 -i desktop 某个视频/音频文件： -re -i &quot;video_file_fullpath&quot; 示例 使用测试用输入源（纯视频流）： 1ffmpeg -re -f lavfi -i testsrc OUTPUT 使用测试用输入源并嵌入时间字幕（纯视频流）： 1ffmpeg -re -f lavfi -i testsrc -vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" OUTPUT 使用测试用输入源和立体声混响并嵌入时间字幕： 12ffmpeg -f dshow -i audio="Stereo Mix (Realtek High Definition Audio)" ^-re -f lavfi -i testsrc -vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" OUTPUT 使用测试用视频音频流并嵌入时间字幕： 12ffmpeg -re -f lavfi -i testsrc -f lavfi -i anoisesrc ^-vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" OUTPUT 可能的问题或者报错信息： 在 CMD 命令行提示符或者批处理脚本的不同执行环境中对 % 字符的转义： 命令行中无需转义，但脚本中必须替换为 %%。 命令行中： ffmpeg -re -f lavfi -i testsrc -vf &quot;drawtext=&#39;text=%{localtime\:%c}:box=1&quot; OUTPUT 脚本中： ffmpeg -re -f lavfi -i testsrc -vf &quot;drawtext=&#39;text=%%{localtime\:%%c}:box=1&quot; OUTPUT [Parsed_drawtext_0 @ 0000029542c8c680] Stray % near &#39;%{localtime:%%c}&#39; 同上 [dshow @ 0000023cfbff78c0] real-time buffer [Stereo Mix (Realtek High Definition Audio)] [audio input] too full or near too full (63% of size: 3041280 [rtbufsize parameter])! frame dropped! 也许是有什么原因导致编码速度受限，如果不是因为太多无关软件占用 CPU 的情况，那可能是编码器的速度已经到达了极限。 串流的音频卡顿 可能是上面提及的编码速度的原因。 或者使用了类似 -re -f dshow -i audio=&quot;Stereo Mix (Realtek High Definition Audio)&quot; 的参数，错误地在 立体声混响 之类的输入源前添加了 -re 参数。单独剔除掉立体声混响输入源前的 -re 即可。 又或者可能是 mpegts 格式串流时容易发生音频流丢包。 [dshow @ 062f2780] Could not run graph (sometimes caused by a device already in use by other application) audio=Stereo Mix (Realtek High Definition Audio): I/O error 打开 Win10 的隐私设置，将麦克风的权限打开： Win10 / 设置 / 隐私 / 麦克风 / 开关 Only one stream supported in the RTP muxer RTP 协议中一个地址只能串流一个流媒体，除非使用 rtp_mpegts 的容器格式可以同时串流视音频。 直播 Win10 上使用 FFmpeg 推流，iOS 上使用 VLC 应用拉流。 直播推流总要占用不少 CPU，CPU 的负荷情况也会影响串流的稳定性。 HTTP 点对点串流 使用 FFmpeg 自带的（实验性）HTTP 服务器点对点串流至 iOS。 Win10（Win10 监听地址：http://0.0.0.0:8080） 1ffmpeg INPUT -listen 1 -f mpegts http://0.0.0.0:8080 示例： 12ffmpeg -re -f lavfi -i testsrc -f lavfi -i anoisesrc ^-vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" -listen 1 -f mpegts http://0.0.0.0:8080 本地测试接收串流：（Win10 IP 地址：192.168.0.1） 1ffplay http://192.168.0.1:8080 iOS VLC / 网络串流 / http://192.168.0.1:8080 细枝末节 可使用任意空闲端口号。 基于 TCP 的 FFmpeg HTTP 点对点串流在收到串流请求之前会一直等待，容易塞满缓冲区，所以这种方法不方便用处也不大。 串流的容器格式除了 mpegts 也可以是其他例如 flv。 UDP/RTP 组播串流 使用 FFmpeg 通过 RTP 协议组播串流至 iOS。 即使是使用 WiFi 也没有问题。 是很方便的局域网内一对多串流方法。 Win10（组播地址：236.0.0.1） 1ffmpeg INPUT -f rtp_mpegts rtp://236.0.0.1:1234 示例： 12ffmpeg -re -f lavfi -i testsrc -f lavfi -i anoisesrc ^-vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" -f rtp_mpegts rtp://236.0.0.1:1234 本地测试接收串流： 1ffplay rtp://236.0.0.1:1234 iOS VLC / 网络串流 / rtp://236.0.0.1:1234 细枝末节 可使用任意空闲组播地址，任意空闲端口号。 基于 UDP 的 RTP 组播直接串流无需等待，因此不太稳定。 受 RTP 串流所需的 rtp_mpegts 格式所限，串流时音质会有所损失，或者提高 CPU 占用增加音频码率来降低损失： ffmpeg -re -f lavfi -i testsrc -f lavfi -i anoisesrc -vf &quot;drawtext=&#39;text=%{localtime\:%c}:box=1&quot; -c:a aac -b:a 512k -f rtp_mpegts rtp://236.0.0.1:1234 似乎适合用来串流到后台播放，因为在后台播放被打断的情况也容易在数秒内恢复串流。 FFmpeg 应该可以进行 RTP 点对点串流，只是 VLC 应用并不支持以这种方式串流。 RTMP/HLS/DASH 流媒体服务器串流 使用 FFmpeg 推流至本地运行的 Nginx 流媒体服务器，iOS 从 Nginx 服务器拉流。 Nginx 服务器的 nginx-rtmp-module 模块提供 RTMP/HLS/DASH 三种协议的方式进行一对多串流。 HLS/DASH 协议的串流方式会不断生成切片文件，虽然默认设置为自动删除，但略麻烦，串流延迟也高，所以不建议选用。 模块还提供网页查看统计信息、录制、控制接口等功能，在此不赘述。 流媒体服务器可以同时接收多个推流、进行多个串流。（虽然用不上） Nginx 安装配置Win10 系统上 Nginx + nginx-rtmp-module 服务器的安装配置： 基本安装配置教程数不胜数大同小异，在此不再赘述。 下载 http://nginx-win.ecsds.eu/download/nginx%201.7.11.3%20Gryphon.zip； 解压； 完成。 配置示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566worker_processes 1;error_log logs/error.log info;events &#123; worker_connections 1024;&#125;rtmp &#123; server &#123; listen 1935; application rtmp &#123; live on; record off; &#125; application hls &#123; live on; hls on; hls_path temp/hls; &#125; application dash &#123; live on; dash on; dash_path temp/dash; &#125; &#125;&#125;http &#123; server &#123; listen 8080; location / &#123; root html; &#125; location /stat &#123; rtmp_stat all; rtmp_stat_stylesheet stat.xsl; &#125; location /stat.xsl &#123; root html; &#125; location /hls &#123; types&#123; application/vnd.apple.mpegurl m3u8; video/mp2t ts; &#125; alias temp/hls; expires -1; add_header Cache-Control no-cache; add_header Access-Control-Allow-Origin *; &#125; location /dash &#123; root temp; add_header Cache-Control no-cache; add_header Access-Control-Allow-Origin *; &#125; &#125;&#125; 常用命令Nginx 目录下： 启动 Nginx 服务器：start nginx Nginx 命令行参数帮助：nginx -h 查看 Nginx 进程：tasklist|find /n /i &quot;nginx&quot; 关闭 Nginx 服务器：nginx -s quit&amp;taskkill /t /f /fi &quot;imagename eq nginx*&quot; RTMP 串流Win10（RTMP 推流地址：rtmp://localhost/rtmp/room） 1ffmpeg INPUT -f flv rtmp rtmp://localhost/rtmp/room 示例： 12ffmpeg -re -f lavfi -i testsrc -f lavfi -i anoisesrc ^-vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" -f flv rtmp://localhost/rtmp/room 本地测试接收串流： 1ffplay rtmp://localhost/rtmp/room iOS（Win10 IP 地址：192.168.0.1） VLC / 网络串流 / rtmp://192.168.0.1/rtmp/room 细枝末节 可在 Nginx 配置文件的 RTMP 配置中使用任意空闲端口号。本例的配置中 RTMP 服务的端口为默认的 1935，因此省略。 串流地址中的 room 也可以换成其他名字，使用时保持前后一致即可。 相比基于 UDP 的 RTP 串流，RTMP 串流要稳定得多，而且 flv 格式还支持立体音混响的无损音质串流，意味着更少的 CPU 占用，例如： ffmpeg -f dshow -i audio=&quot;Stereo Mix (Realtek High Definition Audio)&quot; -c:a copy -f flv rtmp://localhost/rtmp/room RTMP 推流的视音频编码只要与 flv 容器格式相容就行。 不过如果串流到 iOS 的后台播放被打断的话，似乎不容易恢复播放，需要重新打开串流。 以 flv 格式串流的视频质量不算好，这就需要微调一下 FFmpeg 的推流编码参数了。 nginx -s reload 之后，之前正在播放的串流不会被强行中断。 HLS 串流Win10（HLS 推流地址：rtmp://localhost/hls/room） 1ffmpeg INPUT -c:v h264 -c:a aac -f flv rtmp://localhost/hls/room 示例： 12ffmpeg -re -f lavfi -i testsrc -f lavfi -i anoisesrc ^-vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" -c:v h264 -c:a aac -f flv rtmp://localhost/hls/room 本地测试接收串流： 1ffplay http://localhost:8080/hls/room.m3u8 iOS VLC / 网络串流 / http://192.168.0.1:8080/hls/room.m3u8 细枝末节 可在 Nginx 配置文件的 HTTP 配置中使用任意空闲端口号。本例的配置中 HTTP 服务的端口为 8080。 HLS 推流的视音频编码格式建议为 H.264 和 aac。不正确的编码格式不会生成 m3u8 列表文件串流，不过依然可以用 RTMP 地址串流播放，例如： ffplay rtmp://localhost/hls/room DASH 串流Win10（DASH 推流地址：rtmp://localhost/dash/room） 1ffmpeg INPUT -c:v h264 -c:a aac -f flv rtmp://localhost/dash/room 示例： 12ffmpeg -re -f lavfi -i testsrc -f lavfi -i anoisesrc ^-vf "drawtext='text=%&#123;localtime\:%c&#125;:box=1" -c:v h264 -c:a aac -f flv rtmp://localhost/dash/room 本地测试接收串流： 1ffplay http://localhost:8080/dash/room.mpd iOS VLC / 网络串流 / http://192.168.0.1:8080/dash/room.mpd 细枝末节 基本与 HLS 串流一致。 直播附笔一些与正文无关的絮絮叨叨，建议跳过。 UDP/RTP 在 WiFi 环境下也能成功串流？ 是的。主要视乎 VLC 应用支持播放什么格式的 UDP/RTP 流媒体（和路由器是否支持），不过 VLC 应用似乎只支持基于 UDP 的 RTP 协议而不支持单纯的 UDP 协议去串流。 VLC 应用对 UDP/RTP 传输的流媒体格式也有要求： 似乎只支持 RTP Payload Types（RTP 有效载荷类型）中列出的编码格式。 串流其他编码格式需要使用 SDP 文件，而 VLC 似乎不支持使用 SDP 文件的方式串流。 ffmpeg 推流时必须使用 -f rtp_mpegts 的输出格式才能被 VLC 正确解码串流。 RTP 似乎只支持一个地址串流一个视频/音频流，而在 RTP Payload Types 中列出的编码格式中似乎只有 MP2T（MPEG-2 transport stream）格式支持同时串流视音频。 虽然不建议，但在只串流一个视频/音频流的情况下，使用 RTP Payload Types 中列出的编码格式也可以被 VLC 正确解码串流，比如： 0:PCMU : ffmpeg -re -f lavfi -i aevalsrc=&quot;sin(400*2*PI*t)&quot; -ar 8000 -f mulaw -f rtp rtp://127.0.0.1:1234 10:L16 : ffmpeg -f dshow -i audio=&quot;Stereo Mix (Realtek High Definition Audio)&quot; -f s16be -c:a pcm_s16be -f rtp rtp://236.0.0.1:1234 （RTP 似乎不支持串流到广播地址？） 关于 VLC 的 网络串流 支持的 7 种协议的可行串流方法： HTTP HTTP 文件服务器的媒体文件网址 HLS/DASH 串流地址 FFmpeg 内建 HTTP 服务器的点对点串流地址 RTMP FFmpeg 推流至本地 nginx + rtmp 流媒体服务器的串流地址 FTP FTP 文件服务器的媒体文件网址 UDP/RTP FFmpeg 的 RTP 组播串流地址 RTSP 无法只靠 FFmpeg 完成，需要搭建 RTSP 服务器串流。 MMS 不清楚 其他流媒体服务器与 ffserver 开源流媒体服务器还有很多选择， 不一定要使用 Nginx + nginx-rtmp-module 作为流媒体服务器。 FFmpeg 系列以前似乎曾包含 ffserver 程序作为流媒体服务器，支持 RTSP 等协议，不过已经停止开发了。 nginx for Windows 一个团队提供的 Windows 上编译好的 Nginx，也是本文所使用的 Nginx 程序包的来源。 不过免费版从很久之前就开始不再包含 rtmp 模块，所以本文中使用的是旧版 Nginx。 FFmpeg 以外的选择 推流工具不仅限于 FFmpeg，比如 OBS。直播姬 点播常见文件服务器SMB/FTP 服务器 搭建 SMB 或者 FTP 文件服务器在局域网中共享媒体文件，然后在 VLC 应用的 本地网络 中浏览服务器目录并进行点播串流。 搭建 SMB/FTP 服务器的教程数不胜数，不再赘述。 关于使用 VLC 应用浏览 FTP 服务器时可能出现的乱码问题的解决办法，在此不赘述。 HTTP 服务器 搭建 HTTP 服务器在局域网中共享媒体文件，手动复制文件网址到 VLC 中播放。 各种简易搭建本地 HTTP 服务器的教程技巧软件繁多，不再赘述。 DLNA / UPnP 服务器 更为常见好用的局域网共享媒体方法，就是搭建 DLNA 或者 UPnP 服务器，VLC 应用似乎支持在 本地网络 中自动发现并浏览串流。 搭建 DLNA 或 UPnP 服务器的免费或收费的软件选择众多甚至还有配套 iOS 客户端，不再赘述。 “UPnP AV media servers”, “stream video smarter”, “The open media solution”, “The Free Software Media System”, … 例如 foobar2000 就可以使用 UPnP/DLNA Renderer, Server, Control Point 插件提供 UPnP 音乐串流。 VLC 应用虽然可以串流播放，不过使用 iOS 系统上的 foobar2000 应用串流播放体验更好。 点播附笔同样与正文无关的絮叨。 音乐/音频串流何不用网易云、iTunes、Spotify Win10 自带的 Windows Media Player 不也支持串流吗？ 可以，VLC 应用似乎也支持，但是操作起来有些复杂让人头晕。因为我没串流成功过 （比如说没找到 停止串流 的按钮或是什么。似乎需要手动禁用 Windows Media Player Network Sharing Service 服务） 其他类型从 Win10 到 iOS 的串流方式其实还有很多，例如： 远程桌面/屏幕共享 Chrome Remote Desktop NVIDIA GameStream &amp; Moonlight 游戏串流/遥控游玩 Steam &amp; Steam Link 无线投屏/扩展桌面 spacedesk 附录部分相关参考 FFmpeg Wiki 如何串流 https://trac.ffmpeg.org/wiki/StreamingGuide 如何编码 aac https://trac.ffmpeg.org/wiki/Encode/AAC 原始音频格式 https://trac.ffmpeg.org/wiki/audio%20types 高品质音频编码 https://trac.ffmpeg.org/wiki/Encode/HighQualityAudio RTP、RTSP、SDP、ffserver RTP 和 UDP 串流 https://www.cnblogs.com/tocy/p/using-ffmpeg-build-rtp_rtcp-demo.html https://blog.csdn.net/zhoubotong2012/article/details/86711097 https://stackoverflow.com/questions/12007882/ffmpeg-rtp-streaming-error/16468600 RTP Payload Type 相关 https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-1 https://blog.csdn.net/caoshangpa/article/details/53008018 https://en.wikipedia.org/wiki/RTP_audio_video_profile https://blog.csdn.net/fishmai/article/details/69666651 https://tools.ietf.org/html/rfc3551#section-6 RTP 点对点串流 http://operatorerror.org/2013/05/using-ffmpeg-to-stream-audio-in-your-house/ RTP 与 MPEG2 Transport Stream https://trac.ffmpeg.org/ticket/3533 RTP/RTSP 所使用的 SDP 文件详解 https://blog.csdn.net/tongjing524/article/details/49635065 RTSP 与 ffserver 串流 https://stackoverflow.com/a/27007456 https://trac.ffmpeg.org/wiki/ffserver Nginx 串流 rtmp-module 文档 https://github.com/arut/nginx-rtmp-module/wiki/Directives RTMP https://my.oschina.net/gaga/blog/478480 https://www.jianshu.com/p/e5a1510de26a HLS https://blog.csdn.net/tao_627/article/details/22271559 DASH https://blog.csdn.net/u011432426/article/details/54730581 https://blog.csdn.net/yue_huang/article/details/78466537 WMP 串流 http://bbs.wfun.com/thread-819319-1-1.html iOS VLC 应用 Wiki https://wiki.videolan.org/Documentation:IOS/ 论坛 https://forum.videolan.org/viewforum.php?f=36 简介 https://www.videolan.org/vlc/download-ios.html 题外话 实时与即时 串流与流式传输 现场直播与直接广播 播送与放送 双向通话及视频会议]]></content>
      <categories>
        <category>笔记</category>
        <category>串流</category>
      </categories>
      <tags>
        <tag>Win10</tag>
        <tag>iOS</tag>
        <tag>VLC</tag>
        <tag>FFmpeg</tag>
        <tag>streaming</tag>
      </tags>
  </entry>
</search>
